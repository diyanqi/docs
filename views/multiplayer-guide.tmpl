# 多人在线对战开发指南 · {{platformName}}



## 前言

多人在线对战是一款基于 {{platformName}} 编写的游戏 SDK，它为有强联网需求的网络游戏提供了一整套的客户端 SDK 解决方案，因此开发团队不再需要自建服务端，从而节省大部分开发和运维成本。多人在线对战提供的主要功能如下：

- 获取房间列表
- 创建房间
- 加入房间
- 随机加入（符合条件的）房间
- 获取房间玩家
- 获取、设置、同步房间的属性
- 获取、设置、同步玩家的属性
- 发送和接收「自定义事件」
- 离开房间



## SDK 导入

{% block import %}
{% endblock %}



## 初始化

{% block initialization %}
{% endblock %}

其中，
`userId` 作为客户端的唯一标识连接至服务器。
需要注意，这个 `userId` 有如下限制：
- 只允许英文、数字与下划线	
- 长度不能超过 32 字符	
- 一个应用内全局唯一

`gameVersion` 表示客户端的版本号，如果允许多个版本的游戏共存，则可以根据这个版本号路由到不同的游戏服务器。



## 连接

### 建立连接

通过下面的代码将当前玩家连接到多人对战服务：

{% block connection %}
{% endblock %}



## 大厅

我们推荐您**「不要」将玩家加入大厅**，因为在大厅中，服务端会不停的下发最新的全量房间列表，由玩家自行选择其中一个房间进行游戏，这种方式不仅对玩家体验不友好，同时来会带来很大的带宽压力。
我们推荐您像现在的绝大部分手游一样，**直接通过[房间匹配](#房间匹配)的方式，快速匹配开始游戏**。

如果您有特殊的游戏场景需要获取房间列表，可以调用以下方法：

{% block join_lobby %}
{% endblock %}

当玩家加入到大厅后，服务端会将当前大厅的房间列表推送给客户端，开发者可以根据需求显示房间列表，或加入房间参与游戏。

{% block room_list %}
{% endblock %}

更多关于 `LobbyRoom`，请参考 [API 文档]({{lobby_room_url}})。

### 相关事件

{% block lobby_event %}
{% endblock %}



## 房间匹配

房间，是指产生玩家「战斗交互」的单位。比如斗地主的牌桌、MMO 的副本、微信游戏的对战 等，广义上都属于房间的范畴。
玩家之间的战斗交互都是在房间内完成的。所以，玩家「如何进入房间」就成了房间匹配的关键。下面我们将从「创建房间」和「加入房间」两方面来分析一下常用的「房间匹配」功能。

### 创建房间

我们可以这样简单的创建一个房间。创建房间的玩家为房主（[MasterClient](#MasterClient)），房主在创建房间成功的同时也意味着成功加入了该房间。

{% block create_default_room %}
{% endblock %}

我们也可以创建一个设定相关信息的房间。

{% block create_custom_room %}
{% endblock %}

其中 `roomName`、`roomOptions` 和 `expectedUserIds` 这些参数都是可选参数。

#### roomName

房间名称必须保证唯一；如果不设置，则由服务端生成唯一房间 Id 并返回。

#### roomOptions

创建房间时的指定参数，包括：

{% block room_options %}
{% endblock %}

#### expectedUserIds

指定的玩家 ID 数组。这个参数主要用于为某些能加入到房间中的特定玩家「占位」。

注意：这些「特定的玩家」并不会真地加入到房间里来，而只会在房间的「空位」上预留出位置，只允许「特定的玩家」加入。如果开发者要做「邀请加入」的功能，还需要通过其他途径，例如 IM、微信分享等将「房间名称」发送给好友，好友再通过 `{{joinRoom}}(roomName)` 接口加入房间。

{% block create_room_api %}
{% endblock %}

### 加入房间

当房间创建好后，其他的玩家可以通过「加入房间」参与到游戏中。

#### 加入指定房间

通过指定「房间名称」加入房间。

{% block join_room %}
{% endblock %}

在加入房间时，也可以为其他玩家占位，如果房间剩余空位小于占位数量，会加入房间失败。

{% block join_room_with_ids %}
{% endblock %}

{% block join_room_api %}
{% endblock %}

#### 随机加入房间

有时候，我们不需要加入指定某个房间，而是随机加入「符合某些条件的房间」（甚至可以是没有条件），比如快速开始、快速匹配等，这时我们可以通过调用 `{{joinRandomRoom}}` 方法随机加入房间。

{% block join_random_room %}
{% endblock %}

也可以为随机加入设置「条件」，例如随机加入到 level = 2 的房间。

{% block join_random_room_with_condition %}
{% endblock %}

### 加入或创建指定房间

很多游戏没有强制指定房主的场景，只要一部分玩家能进入到同一个房间游戏，谁作为房主都可以，这时我们可以用 `{{joinOrCreateRoom}}()` 来实现。如果有相关房间，这个方法会将当前玩家直接加入房间，如果在房间不存在，则创建一个新房间。

{% block join_or_create_room %}
{% endblock %}

{% block join_or_create_room_api %}
{% endblock %}

### 新玩家加入事件

对于已经在房间的玩家，当有新玩家加入到房间时，服务端会派发 `{{PLAYER_ROOM_JOINED_EVENT}}`（新玩家加入）事件通知客户端，客户端可以通过新玩家的属性，做一些显示逻辑。

{% block player_room_joined %}
{% endblock %}

### 判断本地玩家

拿到房间内的所有玩家后，可以判断某一个 `Player` 是否是当前本地玩家。

{% block player_is_local %}
{% endblock %}

### 离开房间

当玩家想要「主动」离开房间时，可以调用下面的接口。

{% block leave_room %}
{% endblock %}

房间里的其他玩家将会接收到 `{{PLAYER_ROOM_LEFT_EVENT}}`（有玩家离开房间）事件。

{% block player_room_left_event %}
{% endblock %}


### 相关事件

{% block room_events %}
{% endblock %}



## MasterClient

多人对战服务默认房间的创建者房主为 MasterClient。在游戏中他可以关闭房间、设置房间不可见、踢人等，同时他所在的设备还承担了「逻辑运算功能」，例如它在游戏中可以负责以下场景：

* 在卡牌游戏中为用户发牌；
* 控制刷怪的时机及逻辑；
* 游戏结束时判断胜负；
* ...等等。

### MasterClient 位于玩家客户端

您可以将 MasterClient 的逻辑写在客户端中，作为房间创建者的玩家终端会承担游戏运算。在这种情况下，多人对战为 MasterClient 提供了以下方便的功能：

#### MasterClient 掉线转移

当 MasterClient 掉线后，多人对战服务会指任一名新的玩家客户端为 MasterClient。即使当原 MasterClient 恢复上线之后，也不会成为新的 MasterClient。当 MasterClient 变化时，SDK 会派发 `{{MASTER_SWITCHED_EVENT}}`（主机切换）事件通知客户端。

{% block master_switched %}
{% endblock %}

#### 相关事件

{% block master_switched_event %}
{% endblock %}

#### 指定其他成员为 MasterClient

在游戏过程中，MasterClient 如果不想再承担运算功能，可以调用以下方法主动将自己的角色转移给其他玩家客户端：

{% block set_master %}
{% endblock %}

转移 MasterClient 身份后，房间内所有玩家都会收到 `{{MASTER_SWITCHED_EVENT}}` 事件。

### MasterClient 位于服务端

为了确保游戏安全，防止用户作弊等，我们推荐您将 MasterClient 托管在 LeanCloud 提供的服务端 [Client Engine](client-engine.html) 中，同时做以下权限配置：

#### MasterClient 掉线不转移

将 MasterClient 放在服务端后，MasterClient 意外掉线时也不应当转移角色，此时需要在创建房间时指定 `FixedMaster` Flag：

{% block master_fixed %}
{% endblock %}

### MasterClient 的操作

#### 设置房间是否开放

MasterClient 可以设置房间是否开放，当房间关闭时，不允许其他玩家加入。

{% block open_room %}
{% endblock %}

#### 设置房间是否可见

MasterClient 可以设置房间是否可见，当房间不可见时，这个房间将不会出现在玩家的大厅房间列表中，但是**其他玩家可以通过指定 roomName 加入**。

{% block visible_room %}
{% endblock %}

#### 踢人

MasterClient 可以把房间内的其他玩家踢出房间：

{% block kick_player %}
{% endblock %}

踢出房间后，被踢的玩家会收到 `{{ROOM_KICKED_EVENT}}` 事件。

{% block kick_event %}
{% endblock %}

同时除 MasterClient 之外，其他还存在房间的玩家会收到 `{{PLAYER_ROOM_LEFT_EVENT}}` 事件：

{% block kick_left_event %}
{% endblock %}



## 自定义属性及同步

{% block custom_props %}
{% endblock %}

自定义属性同步的主要作用包括：

- 使每个客户端的数据保持一致。
- 自定义属性由服务端管理，当有玩家进入房间后，即可得到所有的自定义属性。

自定义属性又分为「房间自定义属性」和「玩家自定义属性」。

### 房间自定义属性

{% block set_custom_props %}
{% endblock %}

注意：这个接口并不是直接设置「客户端中自定义属性的内存值」，而是发送修改自定义属性的消息，由服务端最终确定是否修改。

当房间属性变化时，SDK 将派发 `{{ROOM_CUSTOM_PROPERTIES_CHANGED_EVENT}}`（房间自定义属性）事件通知所有玩家客户端（包括自己）。

{% block custom_props_event %}
{% endblock %}

#### 只允许 MasterClient 修改房间属性
默认情况下房间内所有 Client 都可以修改房间的自定义属性，如果您希望只允许 MasterClient 修改，可以在创建房间时指定 `MasterUpdateRoomProperties` Flag：

{% block master_update_room_properties %}
{% endblock %}

### 玩家自定义属性

玩家自定义属性与 [房间自定义属性](#房间自定义属性) 基本一致。

{% block set_player_custom_props %}
{% endblock %}

房间内任意一玩家（包括自己）修改自己的自定义属性后，会触发玩家自定义属性变化事件：

{% block player_custom_props_event %}
{% endblock %}

### CAS

CAS 全称为 Compare And Swap，即「检测并更新」的意思，用于避免一些「并发问题」。

当调用 `{{setCustomProperties}}` 时，服务器会接收所有客户端提交的值，这无法满足某些场景下的需求。

比如，一个属性保存着这个房间的某件物品的持有者，即属性的 key 是物品，value 是持有者。
任何客户端都可以在任何时候设置这个属性，如果多个客户端同时调用，**服务端会将最后收到的调用作为最终的值**，这样通常是不符合逻辑的，一般来说，应该属于第一个获得的人。

`{{setCustomProperties}}` 有一个可选参数 `expectedValues` 可作为判断条件。服务器只会更新当前和 `expectedValues` 匹配的属性，使用过期的 `expectedValues` 的更新将会被忽略。

假设一个房间里有 10 名玩家，但是只有 1 把屠龙刀，屠龙刀只能被第一个「抢到」的人获得。

我们可以设置 `expectedValues` 中 `tulong` 值：

{% block set_player_custom_props_with_cas %}
{% endblock %}

### 相关事件

{% block set_player_custom_props_with_cas_event %}
{% endblock %}



## 自定义事件

在[自定义属性](#自定义属性及同步)中，我们介绍了如何根据游戏需求来自定义游戏的数据结构和数据类型。
但是，只有数据是不够的，开发者还需要通过自定义事件互相通信。

### 发送自定义事件

我们可以通过「自定义事件」发送各种事件，比如游戏开始、抓牌、释放 X 技能、游戏结束等等。

{% block send_event %}
{% endblock %}

注意：如果同时设置「接收组」和「接收者 ID 数组」，则「接收者 ID 数组」将会覆盖「接收组」。

### 接收自定义事件

当事件发送成功后，事件接收者中的自定义事件 `{{CUSTOM_EVENT_EVENT}}` 会被触发，此时可以根据 `eventId`（事件 ID）来处理不同事件。

{% block send_event_event %}
{% endblock %}

### `event` 参数

{% block send_event_args %}
{% endblock %}



## 断线

在网络不稳定的情况下，可能会被动断开连接，被动断开连接时 SDK 会向客户端派发 `{{DISCONNECTED_EVENT}}`（断开连接）事件，开发者可以在这里在 UI 上对玩家进行提示：

{% block disconnect %}
{% endblock %}



## 断线重连

### 在房间内保留断线用户

网路不稳定、玩家将游戏置于后台等情况可能导致玩家掉线，玩家掉线时，其他在线玩家的 `{{PLAYER_ACTIVITY_CHANGED_EVENT}}` 事件会被触发：

{% block player_activity_changed %}
{% endblock %}

如果玩家长时间内没有回到游戏，服务器会将玩家移除房间并销毁玩家数据，房间里的其他玩家将会接收到 `{{PLAYER_ROOM_LEFT_EVENT}}`（有玩家离开房间）事件。
在创建房间时，我们可以通过 `{{playerTtl}}` 来设置「玩家掉线后的保留时间」，这样当玩家掉线时，在 `{{playerTtl}}` 时间内服务端会保留掉线玩家在房间内的数据，并等待该玩家恢复上线。

{% block set_player_ttl %}
{% endblock %}

掉线玩家在 `{{playerTtl}}` 时间内回到房间时，其他玩家的 `{{PLAYER_ACTIVITY_CHANGED_EVENT}}` 事件会被再次触发，开发者可以在这个事件中判断玩家的当前状态。

{% block player_activity %}
{% endblock %}

### 重新连接

用户断线后，可以通过下面的接口重新连接至服务器。

{% block reconnect %}
{% endblock %}

注意：这个接口只是重新连接至服务器，如果之前在「房间内游戏」，并不会直接回到房间。如需重连并回到断线前的房间，请参考[重连并回到房间](#重连并回到房间)。

### 回到房间

当玩家连接至服务器以后，可以通过 `{{rejoin}}` 接口「再次回到某房间」。当该玩家在 `{{playerTtl}}` 时间内调用此接口，可以成功回到房间，如果超过 `{{playerTtl}}` 时间，则重回房间失败。

{% block rejoin_room %}
{% endblock %}

### 重连并回到房间

这个接口相当于 `{{reconnect}}()` 和 `{{rejoinRoom}}()` 的合并。通过这个接口，可以直接重新连接并回到「之前的房间」。

{% block reconnect_and_rejoin %}
{% endblock %}



## 关闭

开发者也可以通过下面的接口主动关闭 SDK。关闭后如果需要再次使用，需要重新实例化 Client。

{% block close %}
{% endblock %}



## 错误处理

{% block promise_error %}
{% endblock %}

## 重大错误事件

如果当前发生重大错误，这个事件轻易不会被触发，一旦触发请联系 LeanCloud 来处理。

{% block error_event %}
{% endblock %}



{% block serialization %}
{% endblock %}



## API 文档

更多接口及详情，请参考 [API 接口]({{api_url}})。

<!-- This code is for Google Ads -->
{% include 'templates/include/ga-config.html' %}